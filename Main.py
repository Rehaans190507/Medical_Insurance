"""Insurance-predictor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WS62LV7SX2m8cyASwQopqyOZd-IpoOGV

Importing dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""Data Collection & analysis"""

# loading the data from csv file to panda dataFrame
insurance_dataset = pd.read_csv ('/insurance.csv')

# first five rows of the dataFrame
insurance_dataset.head()

# number of rows and columns
insurance_dataset.shape

# getting some information about the dataSet
insurance_dataset.info()

"""Categorical Feature:
- gender (sex)
- smoker
- region
"""

# checking for missing values
insurance_dataset.isnull().sum()

# Statistical Measure for the dataset
insurance_dataset.describe()

# distribution of age column (analyzing the columns one by one)
sns.set()
plt.figure(figsize = (4,4))
sns.distplot(insurance_dataset['age'])
plt.title('Age distribution')
plt.show()

# Data distribution for Gender Column
plt.figure(figsize=(4,4))
sns.countplot(x='sex', data= insurance_dataset)
plt.title('Gender Distribution')
plt.show()

insurance_dataset['sex'].value_counts()

# BMI distribution (Body Mass Index)
plt.figure(figsize = (4,4))
sns.distplot(insurance_dataset['bmi'])
plt.title('BMI distribution')
plt.show()

"""Normal BMI range --> 18.5 to 24.9"""

# Children Column
plt.figure(figsize = (4,4))
sns.countplot(x='children', data = insurance_dataset)
plt.title('Children Distribution')
plt.show()

insurance_dataset['children'].value_counts()

# Smoker Column
plt.figure(figsize = (4,4))
sns.countplot(x='smoker', data = insurance_dataset)
plt.title('Smoker Distribution')
plt.show()

insurance_dataset['smoker'].value_counts()

# Region Colunm
plt.figure(figsize = (7,4))
sns.countplot(x='region', data = insurance_dataset)
plt.title('Region Distribution')
plt.show()

insurance_dataset['region'].value_counts()

plt.figure(figsize = (4,4))
sns.distplot(insurance_dataset['charges'])
plt.title('Charges distribution')
plt.show()

"""DATA PRE-PROCESSING

ENCODING the categorical features
"""

# Encoding 'SEX' column
insurance_dataset.replace({'sex':{'male':0, 'female':1}}, inplace=True)

# Encoding 'SMOKER' column
insurance_dataset.replace({'smoker':{'yes':0, 'no':1}}, inplace= True)

# Encoding 'Region' column
insurance_dataset.replace({'region':{'southeast':0, 'southwest':1, 'northeast':2, 'northwest':3}}, inplace= True)

"""Splitting the Features and Target

1 represents columns and 0 represents rows
"""

X = insurance_dataset.drop(columns='charges', axis= 1)
Y = insurance_dataset['charges']

print(X)

print(Y)

"""Splitting the Data into Training data and Testing Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size= 0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Linear Regression
"""

# Loading the linear regression model
regressor = LinearRegression()

regressor.fit(X_train, Y_train)

"""Model Evaluation"""

# preditction on training Data
training_data_prediction = regressor.predict(X_train)

# R squared value lies betweeen 0 to 1
r2_train = metrics.r2_score(Y_train, training_data_prediction)
print('R squared value: ',r2_train)

# preditction on Testing Data
testing_data_prediction = regressor.predict(X_test)

# R squared value lies betweeen 0 to 1
r2_test = metrics.r2_score(Y_test, testing_data_prediction)
print('R squared value: ',r2_test)

"""Building A Predictive System"""

#Entering the data in the encoded format
input_data = (31,1,25.74,0,1,0)

# changing input_data into numpy Array
input_data_as_numpy_array = np.asarray(input_data)

#re-shape the array
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = regressor.predict(input_data_reshaped)

print('The Insurance cost in USD$ is: ', prediction[0])
